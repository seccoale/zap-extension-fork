# This file defines the default (English) variants of all of the internationalised messages
sessionfixation.name=Session Fixation
sessionfixation.desc=Session Fixation may be possible. If this issue occurs with a login URL (where the user authenticates themselves to the application), then the URL may be given by an attacker, along with a fixed session id, to a victim, in order to later assume the identity of the victim using the given session id. If the issue occurs with a non-login page, the URL and fixed session id may only be used by an attacker to track an unauthenticated user's actions. If the vulnerability occurs on a cookie field or a form field (POST parameter) rather than on a URL (GET) parameter, then some other vulnerability may also be required in order to set the cookie field on the victim's browser, to allow the vulnerability to be exploited.
sessionfixation.soln=1) Prevent the attacker from gaining a session id by enforcing strict session ids, and by only allocating session ids upon successful authentication to the application.\n2) The server should always create a new session id upon authentication, regardless of whether a session is already in place.\n3) Bind the session id to some identificable client attribute combination, such as IP address, SSL client certificate.\n4) Sessions, when destroyed, must be destroyed on the server, as well as on the client.\n5) Implement a logout mechanism which will destroy all previous sessions for the client.\n6) Implement absolute session timeouts.\n7)Switch from a URL based to a cookie or form based session id implementation, as the latter typically require additional vulnerabilities, in order to be exploitable by an attacker\n
sessionfixation.refs=https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps://www.owasp.org/index.php/Session_fixation\nhttp://www.acros.si/papers/session_fixation.pdf\nhttp://www.technicalinfo.net/papers/WebBasedSessionManagement.html\nhttps://www.owasp.org/index.php/Top_10_2010-A9
sessionfixation.alert.cookie.extrainfo=Cookie set in response when cookie field [{0}] is set to NULL: [{1}]\nCookie set in response with borrowed (valid) cookie value in request [{1}] : [{2}]
sessionfixation.alert.cookie.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
sessionfixation.alert.url.extrainfo=A likely session value has appeared in URLs in the HTML output when URL parameter/pseudo URL parameter [{0}] is set to NULL: [{1}]\nWhen this 'borrowed' session [{1}] is used in a subsequent request for this URL, a new session is not created.
sessionfixation.alert.url.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
sessionfixation.alert.attack={0} field: [{1}]
sessionfixation.alert.logmessage=A likely Session Fixation Vulnerability has been found with [{0}] URL [{1}] on {2} field: [{3}]
#Exposed Session Id messages
sessionidexposedinurl.name=Exposed Session Id
sessionidexposedinurl.desc=A session id is exposed in the URL. By sharing such a website URL (containing the session id), a naiive user may be inadvertently granting access to their data, compromising its confidentiality, integrity, and availability.  URLs containing the session identifier also appear in web browser bookmarks, web server log files, and proxy server log files. 
sessionidexposedinurl.soln=Use a more secure session management implementation, such as one that uses session cookies, which are not as easily shared inadvertently, and which do not typically appear in server log files or web browser bookmarks.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
sessionidexposedinurl.refs=https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management
sessionidexposedinurl.alert.extrainfo={0} field [{1}] contains an exposed session identifier [{2}]
sessionidexposedinurl.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
sessionidexposedinurl.alert.attack={0} field: [{1}]
sessionidexposedinurl.alert.logmessage=An exposed session identifier has been found at [{0}] URL [{1}] on {2} field: [{3}]
#Session Id Cookie not sent securely
sessionidsentinsecurely.name=Session Id transmitted insecurely
sessionidsentinsecurely.desc=A session id may be sent via an insecure mechanism. In the case of a cookie sent in the request, this occurs when HTTP, rather than HTTPS, is used.  In the case of a cookie sent by the server in response (when the URL is modified by setting the named parameter field to NULL), the 'secure' flag is not set, allowing the cookie to be sent later via HTTP rather than via HTTPS. This may allow a passive eavesdropper on the network path to gain full access to the victim's session.  
sessionidsentinsecurely.soln=1) Use the latest available version of SSL/TLS (for HTTPS) for all pages where a session id is communicated between the browser and the web server.\n2) Do not allow the communication to be forced down to the unencrypted HTTP protocol.\n3) Use the 'secure' flag when setting a cookie containing a session id, to prevent its subsequent transmission by an insecure mechanism.\n4) Forward non-secure HTTP page requests to the secure HTTPS equivalent page.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
sessionidsentinsecurely.refs=https://www.owasp.org/index.php/Top_10_2010-A3-Broken_Authentication_and_Session_Management\nhttps://www.owasp.org/index.php/Top_10_2010-A9
sessionidsentinsecurely.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be sent via an insecure mechanism.  
sessionidsentinsecurely.alert.extrainfo.secureflagnotset=The 'secure' flag was not set on the session cookie supplied by the server.
sessionidsentinsecurely.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
sessionidsentinsecurely.alert.attack={0} field: [{1}]
sessionidsentinsecurely.alert.logmessage=A session identifier in {2} field: [{3}] may be sent via an insecure mechanism at [{0}] URL [{1}]
#Session Id Cookie accessible by JavaScript
sessionidaccessiblebyjavascript.name=Session Id cookie accessible to JavaScript
sessionidaccessiblebyjavascript.desc=A Session Id cookie sent by the server (when the URL is modified by setting the named parameter field to NULL) may be accessed by JavaScript on the client. In conjunction with another vulnerability, this may allow the session to be hijacked.  
sessionidaccessiblebyjavascript.soln=1) Use the 'httponly' flag when setting a cookie containing a session id, to prevent it from being accessed by JavaScript in the web browser.  
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
sessionidaccessiblebyjavascript.refs=
sessionidaccessiblebyjavascript.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be accessed using JavaScript in the web browser
sessionidaccessiblebyjavascript.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
sessionidaccessiblebyjavascript.alert.attack={0} field: [{1}]
sessionidaccessiblebyjavascript.alert.logmessage=A session identifier in [{0}] URL [{1}] {2} field: [{3}] may be accessible to JavaScript  
#Session Id Cookie Expiry
sessionidexpiry.name=Session Id Expiry Time/Max-Age is excessive
sessionidexpiry.desc=A Session Id cookie sent by the server (when the URL is modified by setting the named parameter field to NULL) is set to be valid for an excessive period of time. This may be exploitable by an attacker if the user forgets to log out, if the logout functionality does not correctly destroy the session, or if the session id is compromised by some other means.     
sessionidexpiry.soln=1) Use the 'Expire' or 'Max-Age' cookie directives when setting a cookie containing a session id, to prevent it from being available for prolonged periods of time.\n2) Ensure that logout functionality exists, and that it correctly destroys the session.\n3) Use other preventative measures to ensure that if a session id is compromised, it may not be exploited.
#these refs cannot be referenced, but we leave it here in the hope that it can be in the future..
sessionidexpiry.refs=
sessionidexpiry.alert.extrainfo=session identifier {0} field [{1}], value [{2}] may be accessed until [{3}] (since cookie was received at {4}), unless the session is destroyed.
sessionidexpiry.alert.extrainfo.loginpage=The url on which the issue was discovered was flagged as a logon page.
sessionidexpiry.alert.attack={0} field: [{1}]
sessionidexpiry.alert.logmessage=A session identifier in [{0}] URL [{1}] {2} field: [{3}] may be accessed until [{4}], unless the session is destroyed.
sessionidexpiry.browserclose=browser close
sessionidexpiry.timemorethanoneweek=More than one week
sessionidexpiry.timemorethanoneday=More than one day
sessionidexpiry.timemorethanonehour=More than one hour
sessionidexpiry.timelessthanonehour=Less than one hour
sessionidexpiry.timeexpired=Expired
